version: 2
job_common: &job_common
  docker:
    - image: skyuppercut/node-puppeteer
  working_directory: ~/torus-website/app
step_save_cache: &step_save_cache
  save_cache:
    key: dependency-cache-{{ checksum "package.json" }}
    paths:
      - node_modules
step_restore_cache: &step_restore_cache
  restore_cache:
    key: dependency-cache-{{ checksum "package.json" }}
step_setup_global_packages: &step_setup_global_packages
  run:
    name: "Set up global packages"
    command: |
      npm install
      find ./node_modules/ -name ".git" -type d -exec rm -rf {} +
update_lambda_job: &update_lambda_job
  <<: *job_common
  steps:
    - attach_workspace:
        at: ~/torus-website
    - add_ssh_keys
    - run:
        name: "Update lambda version"
        command: |
          mkdir -p ~/.ssh
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          . ./scripts/updateLambda.sh
update_iframeIntegrity: &update_iframeIntegrity
  <<: *job_common
  steps:
    - attach_workspace:
        at: ~/torus-website
    - add_ssh_keys
    - run:
        name: "Update iframe integrity"
        command: |
          mkdir -p ~/.ssh
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          . ./scripts/updateIframeIntegrity.sh
deploy_function: &deploy_function
  <<: *job_common
  steps:
    - attach_workspace:
        at: ~/torus-website
    - add_ssh_keys
    - run:
        name: "Deploy Over SSH to AWS"
        command: |
          . ./scripts/uploadToAws.sh
jobs:
  unit-test:
    <<: *job_common
    steps:
      - checkout:
          path: ~/torus-website
      - <<: *step_restore_cache
      - <<: *step_setup_global_packages
      - run:
          name: "Run Tests for torus website"
          command: (npm run build:dev & sleep 60) && (npm start & sleep 10 && npm run test:e2e)
      - <<: *step_save_cache
      # Save test results
      - store_test_results:
          path: ~/test-results
  test-coverage:
    <<: *job_common
    steps:
      - checkout:
          path: ~/torus-website
      - <<: *step_restore_cache
      - <<: *step_setup_global_packages
      - setup_remote_docker
      - run:
          name: "Running unit tests with coverage"
          command: npm run test:coverage-codecov
      # Save coverage artifacts
      - store_artifacts:
          path: coverage
  build:
    <<: *job_common
    steps:
      - checkout:
          path: ~/torus-website
      - <<: *step_restore_cache
      - <<: *step_setup_global_packages
      - run:
          name: "Build code for torus website"
          command: |
            npm version patch -m 'Updating version to %s [skip ci]' && npm run build && . ./scripts/gitPush.sh
      - persist_to_workspace:
          root: ~/torus-website/
          paths:
            - .
      - <<: *step_save_cache
  build-staging:
    <<: *job_common
    steps:
      - checkout:
          path: ~/torus-website
      - <<: *step_restore_cache
      - <<: *step_setup_global_packages
      - run:
          name: "Build code for torus staging website"
          command: |
            npm version patch -m 'Updating version to %s [skip ci]' && npm run build:staging && . ./scripts/gitPush.sh
      - persist_to_workspace:
          root: ~/torus-website/
          paths:
            - .
      - <<: *step_save_cache
  deploy:
    <<: *deploy_function
  deploy-staging:
    <<: *deploy_function
  update-lambda:
    <<: *update_lambda_job
  update-lambda-staging:
    <<: *update_lambda_job
  update-iframeIntegrity:
    <<: *update_iframeIntegrity
  update-iframeIntegrity-staging:
    <<: *update_iframeIntegrity
  build-testing:
    <<: *job_common
    steps:
      - checkout:
          path: ~/torus-website
      - <<: *step_restore_cache
      - <<: *step_setup_global_packages
      - run:
          name: "Build code for torus testing website"
          command: |
            npm run build:testing
      - persist_to_workspace:
          root: ~/torus-website/
          paths:
            - .
      - <<: *step_save_cache
  build-lrc:
        <<: *job_common
        steps:
          - checkout:
              path: ~/torus-website
          - <<: *step_restore_cache
          - <<: *step_setup_global_packages
          - run:
              name: "Build code for torus lrc website"
              command: |
                npm run build:lrc
          - persist_to_workspace:
              root: ~/torus-website/
              paths:
                - .
          - <<: *step_save_cache
  deploy-testing:
    <<: *job_common
    steps:
      - attach_workspace:
          at: ~/torus-website
      - add_ssh_keys
      - run:
          name: "Deploy Over SSH"
          command: |
            ssh-keyscan -H testing.tor.us >> ~/.ssh/known_hosts
            ssh torus@testing.tor.us "rm -rf ~/testing-torus-website/*"
            tar czf - dist/ | ssh torus@testing.tor.us "cat > ~/testing-torus-website/dist.tgz"
            ssh torus@testing.tor.us "cd ~/testing-torus-website && tar zxvf dist.tgz"
  deploy-lrc:
    <<: *job_common
    steps:
      - attach_workspace:
          at: ~/torus-website
      - add_ssh_keys
      - run:
          name: "Deploy Over SSH"
          command: |
            ssh-keyscan -H lrc.tor.us >> ~/.ssh/known_hosts
            ssh torus@lrc.tor.us "rm -rf ~/lrc-torus-website/*"
            tar czf - dist/ | ssh torus@lrc.tor.us "cat > ~/lrc-torus-website/dist.tgz"
            ssh torus@lrc.tor.us "cd ~/lrc-torus-website && tar zxvf dist.tgz"

workflows:
  version: 2
  commit:
    jobs:
      - test-coverage
      - build:
          filters:
            branches:
              only:
                - master
      - deploy:
          requires:
            - build
            - test-coverage
          filters:
            branches:
              only:
                - master
      - update-lambda:
          requires:
            - deploy
          filters:
            branches:
              only:
                - master
      - update-iframeIntegrity:
          requires:
            - deploy
          filters:
            branches:
              only:
                - master
      - build-staging:
          filters:
            branches:
              only:
                - staging
      - deploy-staging:
          requires:
            - build-staging
            - test-coverage
          filters:
            branches:
              only:
                - staging
      - update-lambda-staging:
          requires:
            - deploy-staging
          filters:
            branches:
              only:
                - staging
      - update-iframeIntegrity-staging:
          requires:
            - deploy-staging
          filters:
            branches:
              only:
                - staging
      - build-testing:
          filters:
            branches:
              only:
                - develop
      - deploy-testing:
          requires:
            - build-testing
            - test-coverage
          filters:
            branches:
              only:
                - develop
      - build-lrc:
          filters:
            branches:
              only:
                - develop
      - deploy-lrc:
          requires:
            - build-lrc
            - test-coverage
          filters:
            branches:
              only:
                - develop
